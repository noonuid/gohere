package problem0148

import (
	"reflect"
	"testing"

	"github.com/noonuid/go/leetcode/structure"
)

func testFramework(t *testing.T, testFunc func(*ListNode) *ListNode) {
	// 测试用例。
	testCases := []struct {
		head *ListNode
		want []int
	}{
		{
			head: structure.Ints2List([]int{4, 2, 1, 3}),
			want: []int{1, 2, 3, 4},
		},
		{
			head: structure.Ints2List([]int{-1, 5, 3, 4, 0}),
			want: []int{-1, 0, 3, 4, 5},
		},
		{
			head: structure.Ints2List([]int{}),
			want: []int{},
		},
		// {
		// 	head: structure.Ints2List([]int{703, 843, -259, -959, 276, 277, 207, -125, -845, -637, -731, -927, -401, -58, -63, 588, -586, 230, -415, 406, 235, 811, -55, -382, -843, 943, 656, 504, 822, -159, -620, 558, -452, -529, 199, -321, -905, 716, 113, -337, 878, 417, -652, 40, 365, 711, 662, 0, 637, 598, 469, 759, 173, 418, 421, -296, 610, 647, -287, 506, -74, 461, -299, 592, 308, -247, 275, -898, 752, 775, 385, 894, 788, 98, -53, 270, 622, -94, -693, 945, 231, -690, -706, 761, 145, -69, -404, -493, 106, -56, 455, -621, 63, 912, -279, 212, -548, 196, -628, 312, 905, -866, -89, -245, -966, -334, -919, -264, -758, 514, -865, -613, -993, 617, 324, 846, -486, -593, -977, -515, -238, 466, 474, -848, 18, -19, 138, -867, 931, 484, 479, -894, -478, -863, -926, 983, -161, 534, 292, 958, -827, -87, -475, -331, -292, 604, 169, -188, -354, 733, 254, -718, -395, 76, 172, -128, 556, -899, -624, -567, 970, -642, 162, -747, 963, -422, 269, -779, -952, 399, -466, 9, -752, -224, 648, -717, 833, -950, -409, 694, -410, -649, 442, -156, 333, -574, -970, -805, 146, -79, 997, -301, 150, -938, -373, 698, 766, 531, 962, -794, -698, -339, 451, -804, -795, -350, 681, 673, 285, 555, 130, 665, -549, -639, -743, -546, 710, -499, -177, -703, 675, -664, -943, 839, 24, 255, 561, 865, -937, -162, 840, 336, -520, 137, 738, -587, -732, -310, 570, 634, -309, -10, 49, -33, -695, -22, 925, -517, -831, 714, 214, -990, -884, -756, 30, -118, 42, -953, -634, -875, -687, 919, 885, 582, -606, -704, -48, -565, 686, 882, 70, 294, 287, -796, 218, 684, -352, -474, 498, 112, -913, 376, -34, 432, -476, 35, 615, 902, 281, 825, 653, 938, -932, -700, -815, 404, 182, 149, 227, 166, 299, 863, 244, 67, 443, 374, -623, 205, -353, -116, -820, 593, 271, -346, 10, 427, 144, 725, 3, -641, 765, 587, -770, 732, -71, 187, -457, -204, 344, 918, 959, 864, 400, 974, -961, 602, 636, 460, 964, -792, -8, 757, -428, 410, 631, 282, -997, 517, 633, -143, -316, -66, -202, 754, 888, -923, -383, -720, -307, 485, 696, -521, -381, -262, 932, 134, -676, -406, -400, 392, 78, 375, -340, 803, -849, -603, -127, 107, 459, 533, 672, -682, 852, -566, -963, 211, 204, -638, 870, -838, 989, -528, -777, -368, -773, 663, 597, 295, 97, 121, 180, 525, 802, 52, 901, 243, 526, 677, 16, 926, 724, -596, -684, 100, 796, 920, -622, -420, 797, -503, 549, -137, 936, 891, -886, -242, -411, 71, 338, -790, -625, -47, -38, -757, 337, -631, -808, -488, 248, -669, 94, -246, 306, -467, 749, 445, -2, 267, -194, 85, 347, 691, 627, -778, 756, -217, 387, 792, -644, -212, 642, -1000, -371, 967, 92, -117, 381, -999, -741, 791, -92, 819, -735, 152, 523, 715, -473, -104, -715, -542, -979, -871, -179, -165, 726, -933, 236, 398, -324, -101, -461, -28, -555, -418, 856, 524, 190, 969, 607, 39, -822, 185, 975, 34, 569, 542, -880, -891, -983, -120, -920, -844, -465, 91, 586, 405, 651, 157, 200, 50, 883, 910, -72, -141, -174, 143, 343, 201, -394, 814, 430, -136, -971, 898, -283, -280, 942, -781, 170, 4, -560, 927, -205, -802, 603, -434, -147, -110, -890, -629, 321, 799, -44, 298, 225, 720, -191, 499, -313, 961, 246, -828, 679, 314, 929, 342, -818, 769, -442, 353, -819, 222, 649, -507, -702, -551, 624, 84, -888, -229, -791, 301, -598, -129, -846, 999, 349, -859, 395, 186, 87, 128, 318, 256, 456, 871, 867, -389, -190, -864, 234, -481, 536, -697, 906, 747}),
		// 	want: []int{-1000, -999, -997, -993, -990, -983, -979, -977, -971, -970, -966, -963, -961, -959, -953, -952, -950, -943, -938, -937, -933, -932, -927, -926, -923, -920, -919, -913, -905, -899, -898, -894, -891, -890, -888, -886, -884, -880, -875, -871, -867, -866, -865, -864, -863, -859, -849, -848, -846, -845, -844, -843, -838, -831, -828, -827, -822, -820, -819, -818, -815, -808, -805, -804, -802, -796, -795, -794, -792, -791, -790, -781, -779, -778, -777, -773, -770, -758, -757, -756, -752, -747, -743, -741, -735, -732, -731, -720, -718, -717, -715, -706, -704, -703, -702, -700, -698, -697, -695, -693, -690, -687, -684, -682, -676, -669, -664, -652, -649, -644, -642, -641, -639, -638, -637, -634, -631, -629, -628, -625, -624, -623, -622, -621, -620, -613, -606, -603, -598, -596, -593, -587, -586, -574, -567, -566, -565, -560, -555, -551, -549, -548, -546, -542, -529, -528, -521, -520, -517, -515, -507, -503, -499, -493, -488, -486, -481, -478, -476, -475, -474, -473, -467, -466, -465, -461, -457, -452, -442, -434, -428, -422, -420, -418, -415, -411, -410, -409, -406, -404, -401, -400, -395, -394, -389, -383, -382, -381, -373, -371, -368, -354, -353, -352, -350, -346, -340, -339, -337, -334, -331, -324, -321, -316, -313, -310, -309, -307, -301, -299, -296, -292, -287, -283, -280, -279, -264, -262, -259, -247, -246, -245, -242, -238, -229, -224, -217, -212, -205, -204, -202, -194, -191, -190, -188, -179, -177, -174, -165, -162, -161, -159, -156, -147, -143, -141, -137, -136, -129, -128, -127, -125, -120, -118, -117, -116, -110, -104, -101, -94, -92, -89, -87, -79, -74, -72, -71, -69, -66, -63, -58, -56, -55, -53, -48, -47, -44, -38, -34, -33, -28, -22, -19, -10, -8, -2, 0, 3, 4, 9, 10, 16, 18, 24, 30, 34, 35, 39, 40, 42, 49, 50, 52, 63, 67, 70, 71, 76, 78, 84, 85, 87, 91, 92, 94, 97, 98, 100, 106, 107, 112, 113, 121, 128, 130, 134, 137, 138, 143, 144, 145, 146, 149, 150, 152, 157, 162, 166, 169, 170, 172, 173, 180, 182, 185, 186, 187, 190, 196, 199, 200, 201, 204, 205, 207, 211, 212, 214, 218, 222, 225, 227, 230, 231, 234, 235, 236, 243, 244, 246, 248, 254, 255, 256, 267, 269, 270, 271, 275, 276, 277, 281, 282, 285, 287, 292, 294, 295, 298, 299, 301, 306, 308, 312, 314, 318, 321, 324, 333, 336, 337, 338, 342, 343, 344, 347, 349, 353, 365, 374, 375, 376, 381, 385, 387, 392, 395, 398, 399, 400, 404, 405, 406, 410, 417, 418, 421, 427, 430, 432, 442, 443, 445, 451, 455, 456, 459, 460, 461, 466, 469, 474, 479, 484, 485, 498, 499, 504, 506, 514, 517, 523, 524, 525, 526, 531, 533, 534, 536, 542, 549, 555, 556, 558, 561, 569, 570, 582, 586, 587, 588, 592, 593, 597, 598, 602, 603, 604, 607, 610, 615, 617, 622, 624, 627, 631, 633, 634, 636, 637, 642, 647, 648, 649, 651, 653, 656, 662, 663, 665, 672, 673, 675, 677, 679, 681, 684, 686, 691, 694, 696, 698, 703, 710, 711, 714, 715, 716, 720, 724, 725, 726, 732, 733, 738, 747, 749, 752, 754, 756, 757, 759, 761, 765, 766, 769, 775, 788, 791, 792, 796, 797, 799, 802, 803, 811, 814, 819, 822, 825, 833, 839, 840, 843, 846, 852, 856, 863, 864, 865, 867, 870, 871, 878, 882, 883, 885, 888, 891, 894, 898, 901, 902, 905, 906, 910, 912, 918, 919, 920, 925, 926, 927, 929, 931, 932, 936, 938, 942, 943, 945, 958, 959, 961, 962, 963, 964, 967, 969, 970, 974, 975, 983, 989, 997, 999},
		// },
	}

	for caseIndex, testCase := range testCases {
		// 被测方法的返回值。
		got := structure.List2Ints(testFunc(testCase.head))
		// 如果方法返回的实际值与期望值不相等，则输出错误对应的测试用例信息。
		if !reflect.DeepEqual(got, testCase.want) {
			t.Errorf("\ncaseIndex: %d\ngot: %v\nwant: %v",
				caseIndex, got, testCase.want)
		}
	}
}

func TestSortList_bottom_up_merge_sort(t *testing.T) {
	testFramework(t, sortList_bottom_up_merge_sort)
}

func TestSortList_top_down_merge_sort(t *testing.T) {
	testFramework(t, sortList_top_down_merge_sort)
}

func TestSortList_convert_to_array(t *testing.T) {
	testFramework(t, sortList_convert_to_array)
}

func TestSortList_bubble(t *testing.T) {
	testFramework(t, sortList_bubble)
}
